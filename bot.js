const Telegraf = require('telegraf')
require('dotenv').config()

const pollsOriginal = require('./data/polls.json')

const {
    Markup,
    Extra,
    Stage,
    session
} = Telegraf

const TelegrafI18n = require('telegraf-i18n')
const path = require("path")

const start = require('./scenes/Start')
const news = require('./scenes/News')
const fond = require('./scenes/Fond')
const admin = require('./scenes/Admin')

const mongoose = require('mongoose')
const bodyParser = require('koa-bodyparser');

mongoose.connect(process.env.MONGO_DB_PASS
    ,{
    useNewUrlParser: true,
})
.then(() => console.log('MongoDb connected'))
.catch(error => console.log(error))

const TOKEN = process.env.BOT_TOKEN
const URL = process.env.URL

const bot = new Telegraf(TOKEN)
const stage = new Stage();

const i18n = new TelegrafI18n({
    defaultLanguage: 'en',
    directory: path.resolve(__dirname, 'locales'),
    useSession: true,
    allowMissing: false,
    sessionName: 'session'
});

bot.use(async (ctx, next) => {
    const start = new Date()
    await next()
    const response_time = new Date() - start
    console.log(`(Response Time: ${response_time})`)
  })

bot.use(session())
bot.use(i18n.middleware());
bot.use(stage.middleware())

stage.register(start, news, fond, admin) 

require('./scenes/helper').setCommands(bot)

let setAnswers
let polls
let index
let poll
let pollMessage
let pollAnswers
let progressBar
let timeout
let userOpinion

bot.action('done', async ctx => {
    try{
        if (!pollMessage){
            ctx.telegram.deleteMessage(ctx.update.callback_query.message.chat.id, ctx.update.callback_query.message.message_id)
            startTest(ctx)
        }else if (pollMessage.message_id === ctx.update.callback_query.message.message_id){
            if (setAnswers.size > 0){
                for (let a of setAnswers){
                    const asessment = poll.asessment[a]
                    if (!asessment){
                        const dict = {
                            0 : "–ö–∞–Ω–∞–ª–∞",
                            1 : "IPO",
                            2 : "–†–æ–±–æ—Ç–∞"
                        }
                        userOpinion = dict[a]
                    }else{
                        pollAnswers.forEach((item, i) => {
                            pollAnswers[i] = item + asessment[i]
                        })
                        console.log(pollAnswers)
                }}
                printPoll(ctx)
            }
    }}catch(e){console.log(e)}
})

bot.action(/answer:/, async ctx => {
    try{
        const answer = +ctx.callbackQuery.data.split(":")[1]
        ctx.webhookReply = false
        if (!pollMessage){
            ctx.telegram.deleteMessage(ctx.update.callback_query.message.chat.id, ctx.update.callback_query.message.message_id)
            startTest(ctx)
        }else if (pollMessage.message_id === ctx.update.callback_query.message.message_id){
            if (poll.multiple_answers){
                if (setAnswers.has(answer)){
                    setAnswers.delete(answer)
                    poll.answers[answer] = poll.answers[answer].substr(2)
                }else{
                    setAnswers.add(answer)
                    poll.answers[answer] = "üéÑ " + poll.answers[answer]
                }
                await ctx.telegram.editMessageText(pollMessage.chat.id, pollMessage.message_id, undefined, `<b>${poll.question}</b>`, Extra.HTML().markup(Markup.inlineKeyboard(convert())))
            }else {
                let i = -1
                if (setAnswers.size > 0){
                    for (let item of setAnswers) i = item
                    if (i !== answer){
                        setAnswers.delete(i)
                        setAnswers.add(answer)
                        poll.answers[answer] = "üéÑ " + poll.answers[answer]  
                        poll.answers[i] = poll.answers[i].substr(2)
                        await ctx.telegram.editMessageText(pollMessage.chat.id, pollMessage.message_id, undefined, `<b>${poll.question}</b>`, Extra.HTML().markup(Markup.inlineKeyboard(convert())))   
                    }
                }else{
                    setAnswers.add(answer)
                    poll.answers[answer] = "üéÑ " + poll.answers[answer]  
                    await ctx.telegram.editMessageText(pollMessage.chat.id, pollMessage.message_id, undefined, `<b>${poll.question}</b>`, Extra.HTML().markup(Markup.inlineKeyboard(convert()))) 
                }
        }}
    }catch(e){}
})

if (process.env.NODE_ENV === "production")
{
    bot.telegram.setWebhook(`${URL}/bot${TOKEN}`)
}else{
    bot.launch(5000)
}

module.exports = bot

async function startTest(ctx){

    polls = JSON.parse(JSON.stringify(pollsOriginal))
    index = 0
    pollAnswers = [0, 0, 0, 0]
    await ctx.replyWithHTML('–ê–Ω–∫–µ—Ç–∞ –ø–æ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–º—É –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—é, –≤—ã–±–∏—Ä–∞–π—Ç–µ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç–æ–≤, —Å–æ–≥–ª–∞—Å–Ω–æ –≤–æ–ø—Ä–æ—Å—É. –ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "‚≠êÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å"', Extra.HTML().markup(Markup.keyboard(
        [
            [`${ctx.i18n.t('menu')}`], [`${ctx.i18n.t('over')}` ]                 
        ]).resize()))
    if (polls.length > 0){
        printPoll(ctx)
    }
}

module.exports.test = startTest

async function printPoll(ctx){
    updateTimeout(ctx)
    poll = polls[index]
    setAnswers = new Set()
    ctx.webhookReply = false
    if (progressBar) {
        const a = await ctx.telegram.deleteMessage(progressBar.chat.id, progressBar.message_id)
    }
    if (pollMessage) {
        const a = await ctx.telegram.deleteMessage(pollMessage.chat.id, pollMessage.message_id)
    }
    index++
    if (index <= polls.length){   
        progressBar = await ctx.replyWithHTML(`–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤: ${index}/${polls.length}`)
        pollMessage = await ctx.replyWithHTML(`${poll.question}`, Extra.HTML().markup(Markup.inlineKeyboard(convert())))
    }else {
        clearTimeout(timeout)
        pollMessage = false
        progressBar = false
        let recommend = []
        let max = pollAnswers[0]
        recommend.push[0]
        pollAnswers.forEach((item, i) => {
            if (item > max){
                max = item
                recommend = []
                recommend.push(i)
            }else if (item === max){
                recommend.push(i)
            }
        })

        const dict = {
            0 : "IPO, –ø—É–ª",
            1 : "IPO, —Å–∞–º",
            2 : "–†–æ–±–æ—Ç",
            3 : "–ö–∞–Ω–∞–ª"
        }

        let str = ''
        let flag
        recommend.forEach(item => {
            const a = dict[item]
            if (a.indexOf(userOpinion.substr(0, 2)) !== -1) flag = true
            str = str + "‚öúÔ∏è " + a + "\n"
        })

        await ctx.replyWithHTML(flag ? (`–ü–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º —Ç–µ—Å—Ç–∞ –º—ã –±—ã –ø—Ä–µ–¥–ª–æ–∂–∏–ª–∏ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ —É—Å–ª—É–≥–∏:\n${str}\n` + `–ó–¥–æ—Ä–æ–≤–æ, —á—Ç–æ –Ω–∞—à–∏ –º–Ω–µ–Ω–∏—è –ø–µ—Ä–µ—Å–µ–∫–ª–∏—Å—å! –ù–∞–≤–µ—Ä–Ω–æ–µ, —ç—Ç–æ —Å—É–¥—å–±–∞! –ï—Å–ª–∏ —É –≤–∞—Å –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º, –º—ã —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º –≤–∞–º –æ—Ç–≤–µ—Ç–∏–º! üòÅ\n\n`+`<i>–û–¥–Ω–∞ –ø–æ–±–µ–¥–∞ –Ω–µ –≤–µ–¥–µ—Ç –∫ —É—Å–ø–µ—Ö—É, –≤ –æ—Ç–ª–∏—á–∏–µ –æ—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –∂–µ–ª–∞–Ω–∏—è –ø–æ–±–µ–∂–¥–∞—Ç—å.</i>\n\n–í—Å—ë –∂–µ –≤—ã–±–æ—Ä –æ—Å—Ç–∞–µ—Ç—Å—è –∑–∞ –≤–∞–º–∏, —Å–¥–µ–ª–∞–π—Ç–µ —à–∞–≥ –∫ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—é –º–µ—á—Ç—ã! üí´`) 
        : `–í—ã —Å–¥–µ–ª–∞–ª–∏ –≤—ã–±–æ—Ä –≤ –ø–æ–ª—å–∑—É ${userOpinion}.\n` + `–ü–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º —Ç–µ—Å—Ç–∞ –º—ã –±—ã –ø—Ä–µ–¥–ª–æ–∂–∏–ª–∏ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ —É—Å–ª—É–≥–∏:\n${str}\n` + `–ï—Å–ª–∏ –í—ã —Å–æ–º–Ω–µ–≤–∞–µ—Ç–µ—Å—å –ø–æ –ø–æ–≤–æ–¥—É —Ä–µ—à–µ–Ω–∏—è, —Ç–æ –º—ã –±—É–¥–µ–º —Ä–∞–¥—ã –í–∞—Å –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –Ω–∞–º —Å–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã! üòÅ`,
        Extra.HTML().markup(Markup.keyboard(
            [
            [`${ctx.i18n.t('menu')}`], [`${ctx.i18n.t('over')}` ]                 
            ]).resize()))
    }
}

function convert(){
    const keyboard = []
    
    if (!poll.orientation) {
        poll.answers.forEach((element, i) => {
            keyboard.push([Markup.callbackButton(element, `answer:${i}`)])
        });
    }else {
        mini = []
        poll.answers.forEach((element, i) => {
            mini.push(Markup.callbackButton(element, `answer:${i}`))
        });
        keyboard.push(mini)
    }
    keyboard.push([Markup.callbackButton("‚≠êÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å", `done`)])

    return keyboard
}

function updateTimeout(ctx){
    if (timeout) clearTimeout(timeout)
    timeout = setTimeout( async ()=> {
        if (pollMessage) {
            const a = await ctx.telegram.editMessageText(pollMessage.chat.id, pollMessage.message_id, undefined, "–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –∑–∞–∫–æ–Ω—á–µ–Ω–æ, –º–æ–∂–µ—Ç–µ –∑–∞–Ω–æ–≤–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É")
            pollMessage = false
        }
    }, 900000)
}
